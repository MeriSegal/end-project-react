{"version":3,"sources":["model/HomeConModel.js","components/CarouselView.js","pages/HomePage.js","model/UserModel.js","pages/LoginPage.js","pages/Patient/PntSignUpPage.js","components/NutritNavBar.js","pages/Nutrit/NutritPntListPage.js","components/BmiView.js","model/MessageModel.js","model/FoodTrModel.js","model/SymptomTrModel.js","components/TrackingView.js","model/WeightModel.js","components/WeightGraph.js","pages/Nutrit/NutritPntTracPage.js","pages/Nutrit/NutritContentPage.js","components/PntNavBar.js","pages/Patient/PntBmiPage.js","pages/Patient/PntQandAPage.js","model/FoodModel.js","model/SymptomModel.js","pages/Patient/PntTrackingPage.js","App.js","serviceWorker.js","index.js"],"names":["HomeConModel","parseTrfood","this","id","title","get","sub","content","img","_url","CarouselView","props","state","nutritContent","HomeContent","Parse","Object","extend","Query","find","then","results","nutContent","map","result","setState","console","log","error","caruoselItem","item","index","Carousel","Item","key","className","Caption","src","alt","Component","HomePage","Button","variant","size","href","UserModel","parseUser","fname","lname","email","phone","birthday","height","weight","ismale","isnutrit","message","LoginPage","login","emailInput","pwdInput","handleLogin","User","logIn","user","redirectToNutrit","redirectToPnt","catch","showInvalidCredentials","to","Form","Alert","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","value","onChange","e","target","onClick","block","PntSignUpPage","signUp","fnameInput","lnameInput","phoneInput","birthdayInput","heightInput","weightInput","isMale","set","Number","updateWeight","myNewObject","current","moment","format","save","alertMsg","maxlength","min","Check","inline","label","checked","NutritNavBar","handleLogout","Navbar","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","NutritPntListPage","viewPnt","event","pntId","pntList","query","equalTo","patients","Message","newpntList","v","activeUser","undefined","redirectPath","pnts","pnt","ListGroup","action","Badge","BmiView","bmiRange","pntHeight","pntWeight","pntIsMale","bmi","toFixed","range","userName","updateTime","tableRows","male","female","detail","Card","Body","Title","Text","Table","MessageModel","parseMsg","isNutrit","isRead","date","time","FoodTrModel","foodName","calories","SymptomTrModel","parseTrSymptom","symptom","TrackingView","theDate","foodTracking","symptomTracking","FoodTracking","trackingFood","SymptomTracking","trickingSymptoms","mrFoodTr","filter","eat","includes","sort","a","b","Date","food","noonFoodTr","mrSymptomTr","st","symp","noonSymptomTr","dayCalory","ListGroupItem","WeightModel","parsePyfood","WeightGraph","weightTracking","WeightTracking","weightArr","dateArr","i","length","push","data","labels","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","NutritPntTracPage","getWeightUpdateTime","weightUpdateTime","reverse","sendMessage","messageInput","readMessages","messages","messageList","updateMsgStatus","msg","object","response","pntName","match","params","patient","trView","trWeight","messagesList","htmlFor","Textarea","rows","withRouter","NutritContentPage","addNewContent","titleInput","subTitleInput","contentInput","imgInput","File","name","goHome","handleFileChange","files","imgURL","URL","createObjectURL","accept","Image","PntNavBar","PntBmiPage","updateGraph","graphUpdate","step","PntQandAPage","showMesages","FoodModel","SymptomModel","parseSymptom","symptomName","PntTrackingPage","changeFood","foodInput","FoodDisplay","contains","foods","foodList","addTrkFood","eatTime","updateFoodTr","addTrkSymptom","symptomTime","updateSymptomTr","eatTimeChange","sympTimeChange","foodSelect","cal","f","symptomSelect","updatFood","symptomInput","symptomList","SymptomList","symptoms","eatTimePicker","showSecond","defaultValue","use24Hours","inputReadOnly","sympTimePicker","foodOptions","toLowerCase","foodfilter","symptomOptions","symptomfilter","serverURL","initialize","App","exact","path","React","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4366ae7c.chunk.js","sourcesContent":["\r\nclass HomeConModel{\r\n\r\n    constructor(parseTrfood) {\r\n        this.id = parseTrfood.id;\r\n        this.title = parseTrfood.get(\"title\");\r\n        this.sub = parseTrfood.get(\"subTitle\");\r\n        this.content = parseTrfood.get(\"content\");\r\n        this.img = parseTrfood.get(\"image\")._url;\r\n    }\r\n    \r\n}\r\n\r\nexport default HomeConModel;","import React, { Component } from 'react';\r\nimport { Carousel } from 'react-bootstrap';\r\nimport HomeConModel from '../model/HomeConModel';\r\nimport Parse from 'parse';\r\n\r\n\r\n\r\nclass CarouselView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {           \r\n            nutritContent: []\r\n        }\r\n    }\r\n  \r\n    componentDidMount() {\r\n       \r\n        const HomeContent = Parse.Object.extend('HomeContent');\r\n        const query = new Parse.Query(HomeContent);\r\n        query.find().then((results) => {\r\n            const nutContent = results.map(result => new HomeConModel(result));\r\n            this.setState({\r\n                nutritContent: nutContent\r\n            });\r\n            console.log('HomeContent found', results);\r\n        }, (error) => {\r\n            console.error('Error while fetching HomeContent', error);\r\n        }); \r\n    }\r\n\r\n\r\n  render() {\r\n    const { nutritContent } = this.state;\r\n\r\n\r\n    const caruoselItem = nutritContent.map((item, index) => \r\n                        <Carousel.Item key={index}>\r\n                            <div className=\"item-title\">                                                            \r\n                                <br/>                                  \r\n                                <h3>{item.title}</h3>\r\n                                <p>{item.sub}</p> \r\n                            </div> \r\n                            <Carousel.Caption>                               \r\n                                <p>{item.content}</p>\r\n                            </Carousel.Caption>\r\n                            <img\r\n                                className=\"d-block w-100\"\r\n                                src={item.img}\r\n                                alt=\"image\"\r\n                            />\r\n                        </Carousel.Item>)\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Carousel>          \r\n\r\n            {caruoselItem}          \r\n\r\n            <Carousel.Item> \r\n                <div className=\"item-title\">\r\n                    <br/>                   \r\n                    <h3>Health Benefits of Fennel</h3>\r\n                    <p>According to the USDA National Nutrient Database for Standard Reference</p>  \r\n                </div>\r\n                <Carousel.Caption>\r\n                    <p>The health benefits of fennel are many and include relief from anemia, indigestion, flatulence, constipation, colic, diarrhea, respiratory disorders, and menstrual disorders. It also aids in eye care. Fennel, which has the scientific name Foeniculum vulgare miller, or its essence, is widely used around the world in mouth fresheners, toothpaste, desserts, antacids, and in various culinary applications.</p>                  \r\n                </Carousel.Caption>\r\n                <img\r\n                    className=\"d-block w-100\"\r\n                    src=\"https://www.organicfacts.net/wp-content/uploads/fennel-2.jpg\"\r\n                    alt=\"First slide\"\r\n                />\r\n            </Carousel.Item>\r\n            \r\n        </Carousel>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CarouselView;","import React, { Component } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport './HomePage.css'\r\nimport CarouselView from '../components/CarouselView';\r\n\r\n\r\nclass HomePage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n        }    \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"home\">\r\n              <div className=\"title\">\r\n                <h1>Every day</h1>  \r\n                <h3>Is a new day</h3>\r\n              </div>\r\n              <div className=\"nutrit\">\r\n                <h2>Nurit Ron - Nutritionist </h2>\r\n                <h2>054-3212345</h2>\r\n              </div>\r\n              <div className=\"btn-con\">\r\n                <Button variant=\"primary\" size=\"lg\" href=\"#/signup\">Sign up</Button>              \r\n                <Button variant=\"primary\" size=\"lg\" href=\"#/login\">Login</Button>\r\n              </div> \r\n              <div className=\"carousel-contaner\">\r\n                <CarouselView/>\r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","\r\nclass UserModel{\r\n\r\n    constructor(parseUser) {\r\n        this.id = parseUser.id;\r\n        this.fname = parseUser.get(\"fname\");\r\n        this.lname = parseUser.get(\"lname\");\r\n        this.email = parseUser.get(\"email\");\r\n        this.phone = parseUser.get(\"phone\");\r\n        this.birthday = parseUser.get(\"birthday\");\r\n        this.height = parseUser.get(\"height\")/100;\r\n        this.weight = parseUser.get(\"weight\"); \r\n        this.ismale = parseUser.get(\"isMale\");  \r\n        this.isnutrit = parseUser.get(\"isnutrit\");\r\n        this.message = 0;     \r\n    }\r\n    \r\n}\r\n\r\nexport default UserModel;","import React, { Component } from 'react';\r\nimport { Button, Form, Alert, Col, Row } from 'react-bootstrap';\r\nimport Parse from 'parse';\r\nimport UserModel from '../model/UserModel';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './form.css'\r\n\r\n\r\nclass LoginPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            emailInput: \"\",\r\n            pwdInput: \"\",\r\n            showInvalidCredentials: false,\r\n            redirectToPnt: false,\r\n            redirectToNutrit: false\r\n\r\n        }    \r\n    }\r\n\r\n    login =()=>{\r\n        const { emailInput, pwdInput } = this.state;\r\n        const { handleLogin } = this.props;\r\n\r\n        Parse.User.logIn(emailInput, pwdInput).then(user =>{\r\n\r\n            handleLogin(new UserModel(user));\r\n            if (user.get(\"isnutrit\")){\r\n                this.setState({                \r\n                    redirectToNutrit: true\r\n                });\r\n            }else{\r\n                this.setState({                \r\n                    redirectToPnt: true\r\n                })\r\n            }            \r\n            \r\n        }).catch(error => {\r\n            // If the login is not valid: show an error alert\r\n            this.setState({\r\n                showInvalidCredentials: true\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { emailInput, pwdInput, showInvalidCredentials, redirectToPnt, redirectToNutrit } = this.state;\r\n\r\n        if (redirectToPnt) {\r\n            return <Redirect to=\"/ptr\" />\r\n        }else if(redirectToNutrit){\r\n            return <Redirect to=\"/patients\" />\r\n        }\r\n\r\n        return (\r\n            <div>\r\n               <h1 className=\"form-title\">Login</h1>\r\n               <p> or <a href=\"#/signup\">create a new account</a> </p>\r\n                <Form className=\"fillScr\">\r\n                    {showInvalidCredentials ? <Alert variant=\"danger\">\r\n                        Invalid Credentials! Incorrect email or password\r\n                    </Alert> : null}\r\n                    <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                        <Form.Label column sm={3}>\r\n                            Email:\r\n                        </Form.Label>\r\n                        <Col sm={9}>\r\n                            <Form.Control type=\"email\" placeholder=\"Email\" value={emailInput} onChange={(e) => this.setState({emailInput: e.target.value, showInvalidCredentials: false})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"formHorizontalPassword\">\r\n                        <Form.Label column sm={3}>\r\n                            Password:\r\n                        </Form.Label>\r\n                        <Col sm={9}>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" value={pwdInput} onChange={(e) => this.setState({pwdInput: e.target.value, showInvalidCredentials: false})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Button variant=\"primary\" size=\"lg\" onClick={this.login} block variant=\"success\">Login </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import React, { Component } from 'react';\r\nimport { Button, Form, Col, Row, Alert} from 'react-bootstrap';\r\nimport Parse from 'parse';\r\nimport { Redirect } from 'react-router-dom';\r\nimport UserModel from '../../model/UserModel';\r\nimport '../form.css'\r\nimport moment from 'moment';\r\n\r\n\r\nclass PntSignUpPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            fnameInput: \"\",\r\n            lnameInput: \"\",\r\n            emailInput: \"\",\r\n            phoneInput: \"\",\r\n            pwdInput: \"\",\r\n            birthdayInput: \"\",\r\n            heightInput: \"\",\r\n            weightInput: \"\",\r\n            isMale: false,\r\n            alertMsg: \"\",\r\n            showInvalidCredentials: false,\r\n            redirectToPnt: false \r\n        }    \r\n    }\r\n\r\n    signUp = () =>{\r\n        const {fnameInput, lnameInput, emailInput, phoneInput, pwdInput, birthdayInput, heightInput, weightInput, isMale} = this.state;\r\n        const { handleLogin } = this.props;\r\n\r\n        const user = new Parse.User()\r\n\r\n        user.set('username', fnameInput+\" \"+lnameInput);\r\n        user.set('email', emailInput);\r\n        user.set('phone', phoneInput);\r\n        user.set('fname', fnameInput);\r\n        user.set('lname', lnameInput);\r\n        user.set('birthday', birthdayInput);\r\n        user.set('height', Number(heightInput));\r\n        user.set('weight', Number(weightInput));\r\n        user.set('isMale', isMale);\r\n        user.set('isnutrit', false);\r\n        user.set('password', pwdInput);\r\n        \r\n\r\n        user.signUp().then((user) => {\r\n            handleLogin(new UserModel(user));\r\n            this.updateWeight();           \r\n        }).catch(error => {\r\n            console.error('Error while signing up user', error);\r\n        });\r\n\r\n    }\r\n\r\n    updateWeight = () =>{\r\n        const {weightInput} = this.state;\r\n\r\n        const WeightTracking = Parse.Object.extend('WeightTracking');\r\n        const myNewObject = new WeightTracking();\r\n        \r\n        myNewObject.set('UserId', Parse.User.current());\r\n        myNewObject.set('pntId', Parse.User.current().id+\"\");\r\n        myNewObject.set('date', moment().format(\"DD-MM-YYYY\"));\r\n        myNewObject.set('weight', weightInput);\r\n        \r\n        myNewObject.save().then(\r\n            (result) => {\r\n                this.setState({                \r\n                    redirectToPnt: true\r\n                })\r\n            console.log('WeightTracking created', result);\r\n            },\r\n            (error) => {\r\n            console.error('Error while creating WeightTracking: ', error);\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        const {redirectToPnt, fnameInput, lnameInput, emailInput, phoneInput, pwdInput, birthdayInput, heightInput, weightInput, isMale, showInvalidCredentials, alertMsg} = this.state;\r\n        \r\n        if (redirectToPnt) {\r\n            return <Redirect to=\"/ptr\" />\r\n        }\r\n       \r\n        return (\r\n            <div>\r\n                <h1 className=\"form-title\">Sign Up</h1>\r\n                \r\n                <Form className=\"fillScr\"> \r\n                    {showInvalidCredentials ? <Alert variant=\"danger\">\r\n                        Invalid Credentials! {alertMsg}\r\n                    </Alert> : null}\r\n                    <Form.Group as={Row} controlId=\"formHorizontalText\">\r\n                        <Form.Label column sm={3}>\r\n                            Name:\r\n                        </Form.Label>\r\n                        <Col sm={9}>\r\n                            <Form.Control type=\"text\" maxlength=\"20\" placeholder=\"Name\" value={fnameInput} onChange={(e) => this.setState({fnameInput: e.target.value})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"formHorizontalText\">\r\n                        <Form.Label column sm={3}>\r\n                            Last Name:\r\n                        </Form.Label>\r\n                        <Col sm={9}>\r\n                            <Form.Control type=\"text\" maxlength=\"20\" placeholder=\"Last name\" value={lnameInput} onChange={(e) => this.setState({lnameInput: e.target.value})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"formHorizontalText\">\r\n                        <Form.Label column sm={3}>\r\n                            Phone:\r\n                        </Form.Label>\r\n                        <Col sm={9}>\r\n                            <Form.Control type=\"text\" placeholder=\"Phone\" value={phoneInput} onChange={(e) => this.setState({phoneInput: e.target.value})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                        <Form.Label column sm={3}>\r\n                            Email:\r\n                        </Form.Label>\r\n                        <Col sm={9}>\r\n                            <Form.Control type=\"email\" maxlength=\"40\" placeholder=\"Email\" value={emailInput} onChange={(e) => this.setState({emailInput: e.target.value})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"formHorizontalPassword\">\r\n                        <Form.Label column sm={3}>\r\n                            Password:\r\n                        </Form.Label>\r\n                        <Col sm={9}>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" value={pwdInput} onChange={(e) => this.setState({pwdInput: e.target.value})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"formHorizontalDate\">\r\n                        <Form.Label column sm={3}>\r\n                            Birthday:\r\n                        </Form.Label>\r\n                        <Col sm={9}>\r\n                            <Form.Control type=\"date\" value={birthdayInput} onChange={(e) => this.setState({birthdayInput: e.target.value})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"formHorizontalNumbr\">\r\n                        <Form.Label column sm={3}>\r\n                            Height:\r\n                        </Form.Label>\r\n                        <Col sm={9}>\r\n                            <Form.Control type=\"number\" min=\"120\" value={heightInput} onChange={(e) => this.setState({heightInput: e.target.value})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"formHorizontalNumbr\">\r\n                        <Form.Label column sm={3}>\r\n                            Weight:\r\n                        </Form.Label>\r\n                        <Col sm={9}>\r\n                            <Form.Control type=\"number\" min=\"40\" maxlength=\"5\" value={weightInput} onChange={(e) => this.setState({weightInput: e.target.value})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} >\r\n                        <Form.Label as=\"legend\"> Gender: </Form.Label>\r\n\r\n                        <Col sm={12}>\r\n                            <Form.Check type=\"checkbox\" inline label=\"Female\" checked={isMale? false:true} onChange={() => this.setState({isMale: false})}/>\r\n                            <Form.Check type=\"checkbox\" inline  label=\"Male\" checked={isMale? true:false} onChange={() => this.setState({isMale: true})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Button variant=\"primary\" size=\"lg\" onClick={this.signUp} block variant=\"success\">SignUp </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PntSignUpPage;","import React, { Component } from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nclass NutritNavBar extends Component {\r\n    constructor(props) {\r\n        super(props);        \r\n    }\r\n\r\n    render() {\r\n        const { handleLogout } = this.props;\r\n\r\n        return (\r\n        <Navbar expand=\"lg\">\r\n            <Navbar.Brand href=\"#/\">Every Day</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"#/patients\">Patients List</Nav.Link>\r\n                    <Nav.Link href=\"#/content\"> Add Content</Nav.Link>\r\n                </Nav>\r\n                <Nav className=\"ml-auto\">\r\n                        <Nav.Link onClick={() => {handleLogout()}} href=\"#\">Logout</Nav.Link>                   \r\n                </Nav>\r\n            </Navbar.Collapse> \r\n         </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NutritNavBar;","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport NutritNavBar from '../../components/NutritNavBar';\r\nimport { ListGroup, Badge } from 'react-bootstrap';\r\nimport Parse from 'parse';\r\nimport UserModel from '../../model/UserModel';\r\nimport './NutritPntListPage.css'\r\n\r\nclass NutritPntListPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n       \r\n        this.state = {\r\n            pntList: [],\r\n            pntId: -1,          \r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n       \r\n        {   \r\n            const User = new Parse.User();\r\n            const query = new Parse.Query(User); \r\n            query.equalTo(\"isnutrit\", false);\r\n            const results = await query.find();\r\n            const patients = results.map(result => new UserModel(result));\r\n            this.setState({\r\n                pntList: patients\r\n            });\r\n        }\r\n\r\n\r\n        {\r\n            const Message = Parse.Object.extend('Message');\r\n            const query = new Parse.Query(Message);\r\n            query.equalTo(\"isNutrit\", false);\r\n            query.equalTo(\"isRead\", false);\r\n            const results = await query.find();\r\n\r\n            results.map(result =>{\r\n                const newpntList = this.state.pntList.map(v => {\r\n                    return v.id === result.get(\"userId\").id ? {...v, message: v.message+1} : {...v, message: v.message}\r\n                  })\r\n                this.setState({\r\n                    pntList: newpntList\r\n                })\r\n            \r\n            }); \r\n        }\r\n        \r\n    }\r\n\r\n    viewPnt = (event)=>{\r\n        this.setState(\r\n            {pntId: event.target.value}\r\n        );       \r\n    }\r\n\r\n\r\n    render() {\r\n        const { activeUser, handleLogout } = this.props;\r\n        const {pntList, pntId} = this.state;\r\n\r\n        if (!activeUser) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n        \r\n        if (pntId !== -1 && pntId !== undefined) {\r\n            const redirectPath = `/nptr/${pntId}`\r\n            return <Redirect to={redirectPath}/>\r\n        }\r\n\r\n\r\n        const pnts = pntList.map(pnt => \r\n            <ListGroup.Item className=\"list-item\" action value={pnt.fname+\" \"+pnt.lname} onClick={this.viewPnt}>\r\n                <Badge className=\"name-bdg\"> <h4> {pnt.fname} {pnt.lname}</h4> </Badge>   phone: {pnt.phone}   &gt;&gt;\r\n                <Badge className=\"babble\"> <h5>{pnt.message===0? \"\":pnt.message +\" new messages\"} </h5></Badge>\r\n            </ListGroup.Item>\r\n        )\r\n\r\n        return (\r\n            <div className=\"fillScr\">\r\n                <NutritNavBar handleLogout={handleLogout} />\r\n\r\n               <ListGroup className=\"group\">\r\n                   {pnts}                   \r\n               </ListGroup>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NutritPntListPage;","import React, { Component } from 'react';\r\nimport { Card, Table } from 'react-bootstrap';\r\nimport './BmiView.css'\r\n\r\n\r\nclass BmiView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n        }    \r\n    }\r\n\r\n\r\n    bmiRange= ()=>{\r\n        const {pntHeight, pntWeight, pntIsMale} = this.props;\r\n        \r\n        const ht = pntHeight*pntHeight\r\n        const bmi = (pntWeight/ht).toFixed(1)\r\n\r\n        let range = \"\"\r\n\r\n        if (pntIsMale){\r\n            if (bmi<20){\r\n                range = \"Underweight\"\r\n            }else if(bmi<26){\r\n                range = \"Normal\"\r\n            }else if(bmi<31){\r\n                range = \"Overweight\"\r\n            }else if(bmi<=40){\r\n                range = \"Obesity\"\r\n            }else if(bmi>40){\r\n                range = \"severe Obesity\"\r\n            }\r\n        }else{\r\n            if (bmi<19){\r\n                range = \"Underweight\"\r\n            }else if(bmi<25){\r\n                range = \"Normal\"\r\n            }else if(bmi<31){\r\n                range = \"Overweight\"\r\n            }else if(bmi<=40){\r\n                range = \"Obesity\"\r\n            }else if(bmi>40){\r\n                range = \"severe Obesity\"\r\n            }\r\n        }\r\n\r\n        return range;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {userName, pntHeight, pntWeight, updateTime} = this.props;\r\n\r\n        const ht = pntHeight*pntHeight\r\n        const bmi = (pntWeight/ht).toFixed(1)\r\n        \r\n        const bmiDetails = [{bmi: \"Underweight\", male: \"> 20\", female: \"> 19\"},\r\n                            {bmi: \"Normal\", male: \"20-25\", female: \"19-24\"},\r\n                            {bmi: \"Overweight\", male: \"26-30\", female: \"25-30\"},\r\n                            {bmi: \"Obesity\", male: \"31-40\", female: \"31-40\"},\r\n                            {bmi: \"severe Obesity\", male: \"< 40\", female: \"< 40\"}]\r\n\r\n\r\n        const tableRows = bmiDetails.map(detail => \r\n                                            <tr className={detail.bmi === this.bmiRange() ? \"bg-this\" : \"\"}>\r\n                                                <td>{detail.bmi}</td>\r\n                                                <td>{detail.male}</td>\r\n                                                <td>{detail.female}</td>\r\n                                            </tr>);\r\n\r\n        return (\r\n\r\n            <Card className=\"bmi-card\">\r\n                <Card.Body>\r\n                    <Card.Title> {userName} BMI : {bmi}</Card.Title>\r\n                    <Card.Text>\r\n                    <br/>\r\n                    Height: {pntHeight}\r\n                    <br/>\r\n                    Current Weight: {pntWeight}\r\n                    <br/>\r\n                    Updated on: {updateTime}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>BMI</th>\r\n                            <th>Male</th>\r\n                            <th>Female</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {tableRows}                       \r\n                    </tbody>\r\n                </Table>\r\n            </Card>           \r\n        );\r\n    }\r\n}\r\n\r\nexport default BmiView;","\r\nclass MessageModel{\r\n   \r\n    constructor(parseMsg) {\r\n        this.id = parseMsg.id;\r\n        this.pntId = parseMsg.get(\"pntId\");\r\n        this.content = parseMsg.get(\"content\");\r\n        this.isNutrit = parseMsg.get(\"isNutrit\");\r\n        this.isRead = parseMsg.get(\"isRead\");\r\n        this.date = parseMsg.get(\"date\");\r\n        this.time = parseMsg.get(\"time\");\r\n    }\r\n    \r\n}\r\n\r\nexport default MessageModel;","\r\nclass FoodTrModel{\r\n\r\n    constructor(parseTrfood) {\r\n        this.id = parseTrfood.id;\r\n        this.date = parseTrfood.get(\"date\");\r\n        this.time = parseTrfood.get(\"time\");\r\n        this.foodName = parseTrfood.get(\"foodName\");\r\n        this.calories = parseTrfood.get(\"calories\");\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default FoodTrModel;","\r\nclass SymptomTrModel{\r\n\r\n    constructor(parseTrSymptom) {\r\n        this.id = parseTrSymptom.id;\r\n        this.date = parseTrSymptom.get(\"date\");\r\n        this.time = parseTrSymptom.get(\"time\");\r\n        this.symptom = parseTrSymptom.get(\"symptom\");\r\n    }\r\n        \r\n}\r\n\r\nexport default SymptomTrModel;","import React, { Component } from 'react';\r\nimport FoodTrModel from '../model/FoodTrModel';\r\nimport SymptomTrModel from '../model/SymptomTrModel';\r\nimport Parse from 'parse';\r\nimport moment from 'moment';\r\nimport { ListGroup, ListGroupItem } from 'react-bootstrap';\r\n\r\nclass TrackingView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            theDate: moment().format(\"DD-MM-YYYY\"),\r\n            foodTracking: [],\r\n            symptomTracking: []\r\n        }  \r\n        \r\n    }\r\n   \r\n\r\n    componentDidMount(){\r\n       \r\n        const {theDate} = this.state;\r\n        const {pntId} = this.props;\r\n\r\n        {\r\n            const FoodTracking = Parse.Object.extend('FoodTracking');\r\n            const query = new Parse.Query(FoodTracking);\r\n            query.equalTo(\"date\", theDate);\r\n            query.equalTo(\"pntId\", pntId+\"\");\r\n            query.find().then(results => {          \r\n                const trackingFood = results.map(result => new FoodTrModel(result))\r\n                this.setState({\r\n                    foodTracking: trackingFood\r\n                });\r\n                console.log(\"tr food: \", trackingFood );\r\n            }, (error) => {\r\n                console.error('Error while fetching SymptomList', error);\r\n            });\r\n        }\r\n\r\n        {\r\n            const SymptomTracking = Parse.Object.extend('SymptomTracking');\r\n            const query = new Parse.Query(SymptomTracking);\r\n            query.equalTo(\"date\", theDate);\r\n            query.equalTo(\"pntId\",pntId+\"\");\r\n            query.find().then(results => {          \r\n                const trickingSymptoms = results.map(result => new SymptomTrModel(result))\r\n                this.setState({\r\n                    symptomTracking: trickingSymptoms\r\n                });\r\n            }, (error) => {\r\n                console.error('Error while fetching SymptomList', error);\r\n            });       \r\n        }\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        const {foodTracking, symptomTracking} = this.state;\r\n\r\n        const mrFoodTr = foodTracking.filter(eat => (eat.time).includes(\"am\"))\r\n                        .sort((a, b) => new Date(\"1984/01/01 \"+a.time) > new Date(\"1984/01/01 \"+b.time) ? 1 : -1)\r\n                        .map(food => <p>{food.time}: {food.foodName}</p>\r\n        );\r\n               \r\n        const noonFoodTr = foodTracking.filter(eat => (eat.time).includes(\"pm\"))\r\n                        .sort((a, b) => new Date(\"1984/01/01 \"+a.time) > new Date(\"1984/01/01 \"+b.time) ? 1 : -1)\r\n                        .map(food => <p>{food.time}: {food.foodName}</p>\r\n        );\r\n\r\n        const mrSymptomTr = symptomTracking.filter(st => (st.time).includes(\"am\"))\r\n                        .sort((a, b) => new Date(\"1984/01/01 \"+a.time) > new Date(\"1984/01/01 \"+b.time) ? 1 : -1)\r\n                        .map(symp => <p>{symp.time}: {symp.symptom}</p>                     \r\n        );  \r\n\r\n        const noonSymptomTr = symptomTracking.filter(st => (st.time).includes(\"pm\"))\r\n                        .sort((a, b) => new Date(\"1984/01/01 \"+a.time) > new Date(\"1984/01/01 \"+b.time) ? 1 : -1)\r\n                        .map(symp => <p>{symp.time}: {symp.symptom}</p>  \r\n        );               \r\n\r\n        let dayCalory = 0; \r\n        for (let food in foodTracking){\r\n            dayCalory += Number(foodTracking[food].calories)\r\n        }\r\n\r\n        return (\r\n            <div className=\"tr-view-con\">\r\n                <ListGroup className=\"tr-view\"> \r\n                    <ListGroupItem className=\"eat-view\">\r\n                        <h5>Meals:</h5>\r\n                        <div className=\"mrn\"> <h6>Morning:</h6> {mrFoodTr}</div>\r\n                        <div className=\"eve\"> <h6>Afternoon:</h6> {noonFoodTr}</div>  \r\n                        <div className=\"calory\"> <h6>Calories today: {dayCalory.toFixed(2)}</h6> </div>                           \r\n                    </ListGroupItem>\r\n                    <ListGroupItem className=\"symp-view\">\r\n                        <h5>Symptoms:</h5>\r\n                        <div className=\"mrn\"> <h6>Morning:</h6> {mrSymptomTr}</div>\r\n                        <div className=\"eve\"> <h6>Afternoon:</h6> {noonSymptomTr}</div>\r\n                    </ListGroupItem>               \r\n                </ListGroup>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrackingView;","class WeightModel{\r\n\r\n    constructor(parsePyfood) {\r\n        this.id = parsePyfood.id;\r\n        this.date = parsePyfood.get(\"date\");\r\n        this.weight = parsePyfood.get(\"weight\");\r\n    }\r\n    \r\n}\r\n\r\nexport default WeightModel;","import React, { Component } from 'react';\r\nimport Parse from 'parse';\r\nimport WeightModel from '../model/WeightModel';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nclass WeightGraph extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {  \r\n            weightTracking: []\r\n        }\r\n    }\r\n  \r\n    componentDidMount(){\r\n\r\n        const {pntId} = this.props;\r\n        \r\n        const WeightTracking = Parse.Object.extend('WeightTracking');\r\n        const query = new Parse.Query(WeightTracking);\r\n        query.equalTo(\"pntId\", pntId+\"\");    \r\n        query.find().then((results) => { \r\n            this.setState({\r\n                weightTracking: results.map(result => new WeightModel(result))\r\n            })   \r\n            console.log('WeightGraph found', results);\r\n        }, (error) => {\r\n            console.error('Error while fetching WeightTracking', error);\r\n        });\r\n\r\n        \r\n    }\r\n\r\n  render() {\r\n    const {weightTracking} = this.state;   \r\n\r\n    let weightArr = []   \r\n    let dateArr = [] \r\n    \r\n    for (let i= 0; i<weightTracking.length; i++){     \r\n        dateArr.push(weightTracking[i].date)\r\n        weightArr.push(weightTracking[i].weight)        \r\n    }\r\n      \r\n    const data = {\r\n      labels: dateArr,\r\n      datasets: [\r\n        {\r\n          label: 'Weight',\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(42, 38, 105)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(136, 196, 163, 0.822)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 3,\r\n          pointHitRadius: 10,\r\n          data: weightArr\r\n        }\r\n      ]\r\n    };\r\n\r\n    return (\r\n        <Line data={data} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeightGraph;","import React, { Component } from 'react';\r\nimport { withRouter, Redirect } from \"react-router-dom\";\r\nimport BmiView from '../../components/BmiView';\r\nimport { ListGroup, Form, Button } from 'bootstrap-4-react';\r\nimport Parse from 'parse';\r\nimport moment from 'moment';\r\nimport UserModel from '../../model/UserModel';\r\nimport MessageModel from '../../model/MessageModel';\r\nimport TrackingView from '../../components/TrackingView';\r\nimport FontAwesome from 'react-fontawesome';\r\nimport WeightGraph from '../../components/WeightGraph';\r\nimport './NutritPntTracPage.css';\r\n\r\nclass NutritPntTracPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pntId: \"\",\r\n            pntName: \"\",\r\n            pntHeight: \"\",\r\n            pntWeight: \"\",\r\n            pntIsMale: \"\",\r\n            weightUpdateTime: \"\",\r\n            messageInput: \"\",\r\n            messageList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n\r\n        this.setState({\r\n            pntName: id\r\n        })\r\n\r\n\r\n        {   \r\n            const User = new Parse.User();\r\n            const query = new Parse.Query(User); \r\n            query.equalTo(\"username\", id);\r\n            query.find().then(results => {    \r\n                const patient = results.map(result => new UserModel(result));\r\n                this.setState({\r\n                    pntId: patient[0].id,\r\n                    pntHeight: patient[0].height,\r\n                    pntWeight: patient[0].weight,\r\n                    pntIsMale: patient[0].ismale\r\n                })\r\n                this.readMessages() \r\n                this.getWeightUpdateTime()               \r\n            }, (error) => {\r\n                console.error('Error while fetching Message', error);\r\n            });\r\n        }\r\n    }\r\n\r\n    getWeightUpdateTime = ()=>{\r\n        const WeightTracking = Parse.Object.extend('WeightTracking');\r\n        const query = new Parse.Query(WeightTracking);\r\n        query.equalTo(\"pntId\", this.state.pntId+\"\");    \r\n        query.find().then((results) => { \r\n            this.setState({\r\n                weightUpdateTime: results.reverse()[0].get(\"date\")\r\n            })   \r\n            console.log('WeightTracking found', results[0].get(\"date\"));\r\n        }, (error) => {\r\n            console.error('Error while fetching WeightTracking', error);\r\n        });\r\n    }\r\n\r\n    sendMessage = () =>{\r\n        const {messageInput, pntId} = this.state;\r\n\r\n        const Message = Parse.Object.extend('Message');\r\n        const myNewObject = new Message();\r\n\r\n        myNewObject.set('userId', Parse.User.current());\r\n        myNewObject.set('pntId', pntId+\"\");\r\n        myNewObject.set('content', messageInput);\r\n        myNewObject.set('isNutrit', true);\r\n        myNewObject.set('isRead', false);\r\n        myNewObject.set('date', moment().format(\"DD-MM-YYYY\"));\r\n        myNewObject.set('time', moment().format(\"h:mm a\"));\r\n        myNewObject.save().then( result => {\r\n            this.setState({\r\n                messageInput: \"\"\r\n            })\r\n            this.readMessages()\r\n        },\r\n        (error) => {\r\n            console.error('Error while creating Message: ', error);\r\n        });\r\n    }\r\n\r\n    readMessages = () =>{\r\n        const {pntId} = this.state;\r\n\r\n        const Message = Parse.Object.extend('Message');\r\n        const query = new Parse.Query(Message);\r\n        query.equalTo(\"pntId\", pntId+\"\");\r\n        query.find().then(results => {    \r\n            const messages = results.reverse().map(result => new MessageModel(result))    \r\n            this.setState({\r\n                messageList: messages\r\n            });\r\n            this.updateMsgStatus()\r\n            console.log('Message found', results);\r\n        }, (error) => {\r\n            console.error('Error while fetching Message', error);\r\n        });\r\n    }\r\n\r\n    updateMsgStatus = () =>{\r\n\r\n        const {messageList} = this.state;\r\n        const Message = Parse.Object.extend('Message')\r\n        messageList.map(msg =>\r\n            new Parse.Query(Message).get(msg.id).then((object) => {          \r\n            object.set('isRead', true);           \r\n            object.save().then((response) => {              \r\n              console.log('Updated Message', response);\r\n            }, (error) => {\r\n              console.error('Error while updating Message', error);\r\n            });\r\n          }))\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        const {pntName, pntId, pntHeight, pntWeight, weightUpdateTime, pntIsMale, messageInput, messageList} = this.state;\r\n\r\n        if (pntId === -1) {\r\n            const redirectPath = `/patients`\r\n            return <Redirect to={redirectPath}/>\r\n        }\r\n\r\n        let trView = <div></div>\r\n        let trWeight = <div></div>\r\n        if (pntId!==\"\"){\r\n            trView = <TrackingView pntId={pntId}></TrackingView>\r\n            trWeight = <WeightGraph pntId={pntId}></WeightGraph>\r\n        }\r\n\r\n        const messagesList = messageList.map((msg, index) => \r\n            <ListGroup.Item key={index} className={!msg.isNutrit? \"list-item-ans\":\"list-item-ask\"}>\r\n               {msg.date}:  {msg.time}: {msg.content}\r\n            </ListGroup.Item>\r\n        )\r\n\r\n        return (\r\n            <div className=\"trk-pnt-con\">\r\n                <h1 className=\"form-title\">Tracking {pntName}</h1>\r\n                <Button variant=\"primary\" size=\"lg\" onClick={()=>this.setState({pntId: -1})} variant=\"success\">Back to list \r\n                <FontAwesome className=\"fas fa-level-up fa-10x\"/> </Button>\r\n\r\n               <div className=\"gr-con col-lg-5\"> \r\n\r\n                    <div className=\"tr-con\">    \r\n                        {trView}\r\n                    </div> \r\n\r\n                    <div className=\"weight-graph\">\r\n                        {trWeight}\r\n                    </div>  \r\n                    \r\n                </div>\r\n\r\n                <div className=\"bmi-view col-lg-5\">\r\n                    <BmiView userName={pntName}  pntHeight={pntHeight} pntWeight={pntWeight} updateTime={weightUpdateTime} pntIsMale={pntIsMale}/>\r\n                </div>\r\n\r\n                <div className=\"chat-con\">\r\n                    <Form className=\"chat-form\">\r\n                        <Form.Group>                      \r\n                            <label htmlFor=\"Textarea\"> Patient counseling:</label>\r\n                            <Form.Textarea id=\"Textarea\" rows=\"3\" maxlength=\"250\" type=\"text\" value={messageInput} onChange={(e) => this.setState({messageInput: e.target.value})}></Form.Textarea>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group >\r\n                            <Button className=\"chat-btn\" variant=\"primary\" size=\"lg\" onClick={this.sendMessage} block variant=\"success\">Send Message </Button>\r\n                        </Form.Group>\r\n                    </Form>\r\n\r\n                    <ListGroup className=\"group\">\r\n                        {messagesList}   \r\n                    </ListGroup>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(NutritPntTracPage);","import React, { Component } from 'react';\r\nimport NutritNavBar from '../../components/NutritNavBar';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Parse from 'parse';\r\nimport { Form, Col, Row, Button, Image } from 'react-bootstrap';\r\n\r\nclass NutritContentPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            titleInput: \"\",\r\n            subTitleInput: \"\",\r\n            contentInput: \"\",\r\n            imgInput: null,\r\n            goHome: false\r\n        }    \r\n    }\r\n\r\n    addNewContent = () =>{\r\n        const { titleInput, subTitleInput, contentInput, imgInput } = this.state;\r\n\r\n        const HomeContent = Parse.Object.extend('HomeContent');\r\n        const myNewObject = new HomeContent();\r\n\r\n        myNewObject.set('title', titleInput);\r\n        myNewObject.set('subTitle', subTitleInput);\r\n        myNewObject.set('content', contentInput);\r\n        myNewObject.set('image', new Parse.File(imgInput.name, imgInput));\r\n\r\n        myNewObject.save().then(\r\n        (result) => {\r\n            this.setState({\r\n                goHome: true\r\n            });\r\n            console.log('HomeContent created', result);\r\n        },\r\n        (error) => {\r\n            console.error('Error while creating HomeContent: ', error);\r\n        }\r\n        );\r\n    }\r\n\r\n    handleFileChange = (event) => {\r\n\r\n        if (event.target.files[0]) {\r\n            this.setState({\r\n                imgInput: event.target.files[0]\r\n            });\r\n        } else {\r\n            this.setState({\r\n                imgInput: null\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { activeUser, handleLogout } = this.props;\r\n        const { titleInput, subTitleInput, contentInput, imgInput, goHome } = this.state;\r\n\r\n        if (!activeUser || goHome) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n\r\n        const imgURL = imgInput ? URL.createObjectURL(imgInput) : \"\";\r\n\r\n        return (\r\n            <div>\r\n                <NutritNavBar handleLogout={handleLogout} />\r\n\r\n               <h1 className=\"form-title\">Add Content to the home Page</h1>\r\n                \r\n                <Form> \r\n                    <Form.Group as={Row} controlId=\"title\">\r\n                        <Form.Label column sm={2}>\r\n                            Title:\r\n                        </Form.Label>\r\n                        <Col sm={10}>\r\n                            <Form.Control type=\"text\" maxlength=\"30\" placeholder=\"Title (Up to 30 letters)\" value={titleInput} onChange={(e) => this.setState({titleInput: e.target.value})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"sub\">\r\n                        <Form.Label column sm={2}>\r\n                            Sub Title:\r\n                        </Form.Label>\r\n                        <Col sm={10}>\r\n                            <Form.Control type=\"text\" maxlength=\"100\" placeholder=\"Sub Title (Up to 100 letters)\" value={subTitleInput} onChange={(e) => this.setState({subTitleInput: e.target.value})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"content\">\r\n                        <Form.Label column sm={2}>\r\n                            Content:\r\n                        </Form.Label>\r\n                        <Col sm={10}>\r\n                            <Form.Control type=\"text\" maxlength=\"380\" placeholder=\"content (Up to 380 letters)\" value={contentInput} onChange={(e) => this.setState({contentInput: e.target.value})}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"img\">\r\n                        <Form.Label column sm={2}>\r\n                            Image:\r\n                        </Form.Label>\r\n                        <Col sm={10}>\r\n                            <Form.Control type=\"file\" accept=\"image/*\" onChange={this.handleFileChange} />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Image src={imgURL} className=\"preview\" />\r\n\r\n                    <Form.Group>\r\n                        <Button variant=\"primary\" size=\"lg\" onClick={this.addNewContent} block variant=\"success\">Add content </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NutritContentPage;","import React, { Component } from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nclass PntNavBar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);        \r\n    }\r\n\r\n    render() {\r\n\r\n        const { handleLogout } = this.props;\r\n\r\n        return (\r\n           <Navbar expand=\"lg\">\r\n                <Navbar.Brand href=\"#/\">Every Day</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#/ptr\">Food and Symptoms</Nav.Link>\r\n                        <Nav.Link href=\"#/bmi\">BMI</Nav.Link>\r\n                        <Nav.Link href=\"#/chat\">Consulting</Nav.Link>\r\n                    </Nav>\r\n                    <Nav className=\"ml-auto\">\r\n                        <Nav.Link onClick={() => {handleLogout()}} href=\"#\">Logout</Nav.Link>                   \r\n                    </Nav>\r\n                </Navbar.Collapse> \r\n           </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PntNavBar;","import React, { Component } from 'react';\r\nimport PntNavBar from '../../components/PntNavBar';\r\nimport { Redirect } from 'react-router-dom';\r\nimport BmiView from '../../components/BmiView';\r\nimport { Form , Col, Row, Button } from 'react-bootstrap';\r\nimport './PntBmiPage.css';\r\nimport Parse from 'parse';\r\nimport moment from 'moment';\r\nimport {Line} from 'react-chartjs-2';\r\nimport WeightModel from '../../model/WeightModel';\r\n\r\nclass PntBmiPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            weightInput: this.props.activeUser.weight,\r\n            updateTime: \"\",\r\n            graphUpdate: []\r\n        }    \r\n    }\r\n\r\n    componentDidMount(){\r\n        const WeightTracking = Parse.Object.extend('WeightTracking');\r\n        const query = new Parse.Query(WeightTracking);\r\n        query.equalTo(\"UserId\", Parse.User.current());    \r\n        query.find().then((results) => { \r\n            this.setState({\r\n                updateTime: results.reverse()[0].get(\"date\")\r\n            })   \r\n            console.log('WeightTracking found', results[0].get(\"date\"));\r\n        }, (error) => {\r\n            console.error('Error while fetching WeightTracking', error);\r\n        });\r\n\r\n        this.updateGraph() \r\n    }\r\n\r\n    updateWeight = () =>{\r\n        const {weightInput} = this.state;\r\n\r\n        const User = new Parse.User();\r\n        const query = new Parse.Query(User);\r\n        \r\n        // Finds the user by its ID\r\n        query.get(Parse.User.current().id).then((user) => {\r\n          // Updates the data we want      \r\n          user.set('weight', Number( weightInput));        \r\n          // Saves the user with the updated data\r\n          user.save().then((response) => {\r\n            console.log('Updated user', response);\r\n          }).catch((error) => {\r\n            console.error('Error while updating user', error);\r\n          });\r\n        });\r\n\r\n        const WeightTracking = Parse.Object.extend('WeightTracking');\r\n        const myNewObject = new WeightTracking();\r\n        \r\n        myNewObject.set('UserId', Parse.User.current());\r\n        myNewObject.set('pntId', Parse.User.current().id+\"\");\r\n        myNewObject.set('date',  moment().format(\"DD-MM-YYYY\"));\r\n        myNewObject.set('weight', weightInput);\r\n        \r\n        myNewObject.save().then(\r\n            (result) => {\r\n                this.setState({\r\n                    updateTime: moment().format(\"DD-MM-YYYY\")\r\n                }) \r\n                this.updateGraph() \r\n            console.log('WeightTracking created', result);\r\n            },\r\n            (error) => {\r\n            console.error('Error while creating WeightTracking: ', error);\r\n            }\r\n        );\r\n    }\r\n\r\n    updateGraph = () =>{\r\n\r\n        const WeightTracking = Parse.Object.extend('WeightTracking');\r\n        const query = new Parse.Query(WeightTracking);\r\n        query.equalTo(\"pntId\", Parse.User.current().id);    \r\n        query.find().then((results) => { \r\n            this.setState({\r\n                graphUpdate: results.map(result => new WeightModel(result))\r\n            })   \r\n            console.log('WeightGraph found', results);\r\n        }, (error) => {\r\n            console.error('Error while fetching WeightTracking', error);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { activeUser, handleLogout } = this.props;\r\n        const {updateTime, weightInput, graphUpdate} = this.state;\r\n\r\n        if (!activeUser) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n\r\n        let weightArr = []   \r\n        let dateArr = [] \r\n        \r\n        for (let i= 0; i<graphUpdate.length; i++){     \r\n            dateArr.push(graphUpdate[i].date)\r\n            weightArr.push(graphUpdate[i].weight)        \r\n        }\r\n      \r\n        const data = {\r\n          labels: dateArr,\r\n          datasets: [\r\n            {\r\n              label: 'Weight', fill: false, lineTension: 0.5, backgroundColor: 'rgba(75,192,192,0.4)',\r\n              borderColor: 'rgba(42, 38, 105)', borderCapStyle: 'butt', borderDash: [], borderDashOffset: 0.0,\r\n              borderJoinStyle: 'miter', pointBorderColor: 'rgba(75,192,192,1)', pointBackgroundColor: '#fff',\r\n              pointBorderWidth: 1, pointHoverRadius: 5, pointHoverBackgroundColor: 'rgba(136, 196, 163, 0.822)',\r\n              pointHoverBorderColor: 'rgba(220,220,220,1)', pointHoverBorderWidth: 2, pointRadius: 3,\r\n              pointHitRadius: 10, data: weightArr\r\n            }\r\n          ]\r\n        };\r\n\r\n        return (\r\n            <div className=\"fillScr\">\r\n               <PntNavBar handleLogout={handleLogout}/>\r\n\r\n               <div className=\"g-con col-lg-5\">\r\n                    <Form className=\"bmi-form\">\r\n                            <Form.Group as={Row} controlId=\"formHorizontalWeight\">\r\n                                <Form.Label column sm={4}>\r\n                                Weight:\r\n                                </Form.Label>\r\n                                <Col sm={8}>\r\n                                    <Form.Control type=\"number\" min=\"40\" step=\"0.1\" value={weightInput} placeholder={activeUser.weight} onChange={(e) => this.setState({weightInput: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group>\r\n                                <Button variant=\"primary\" size=\"lg\" onClick={this.updateWeight} block variant=\"success\">Update Weight </Button>\r\n                            </Form.Group>\r\n                    </Form>\r\n\r\n                    <div className=\"weight-graph\">\r\n                            <Line data={data} />\r\n                    </div>\r\n               </div>\r\n                <div className=\"bmi-view col-lg-5\">\r\n                    <BmiView userName={activeUser.fname+\" \"+activeUser.lname}  pntHeight={activeUser.height} pntWeight={weightInput} pntIsMale={activeUser.ismale} updateTime={updateTime}/>\r\n                </div>\r\n                             \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PntBmiPage;","import React, { Component } from 'react';\r\nimport PntNavBar from '../../components/PntNavBar';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { ListGroup, Form, Button } from 'bootstrap-4-react';\r\nimport Parse from 'parse';\r\nimport MessageModel from '../../model/MessageModel';\r\nimport moment from 'moment';\r\nimport './PntQandAPage.css'\r\n\r\n\r\nclass PntQandAPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            messageInput: \"\",\r\n            messageList: []\r\n        }    \r\n    }\r\n\r\n\r\n    sendMessage = () =>{\r\n        const {messageInput} = this.state;\r\n\r\n        const Message = Parse.Object.extend('Message');\r\n        const myNewObject = new Message();\r\n\r\n        myNewObject.set('userId', Parse.User.current());\r\n        myNewObject.set('pntId', Parse.User.current().id);\r\n        myNewObject.set('content', messageInput);\r\n        myNewObject.set('isNutrit', false);\r\n        myNewObject.set('isRead', false);\r\n        myNewObject.set('date', moment().format(\"DD-MM-YYYY\"));\r\n        myNewObject.set('time', moment().format(\"h:mm a\"));\r\n\r\n        myNewObject.save().then( result => {\r\n            this.setState({\r\n                messageInput: \"\"\r\n            })\r\n            this.showMesages()\r\n        },\r\n        (error) => {\r\n            console.error('Error while creating Message: ', error);\r\n        });\r\n    }\r\n\r\n\r\n    showMesages = ()=>{\r\n\r\n        const Message = Parse.Object.extend('Message');\r\n        const query = new Parse.Query(Message);\r\n        query.equalTo(\"pntId\", Parse.User.current().id);      \r\n        query.find().then(results => {    \r\n            const messages = results.reverse().map(result => new MessageModel(result))    \r\n            this.setState({\r\n                messageList: messages\r\n            });\r\n            console.log('Message found', results);\r\n        }, (error) => {\r\n            console.error('Error while fetching Message', error);\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.showMesages();\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { activeUser, handleLogout } = this.props;\r\n        const { messageInput, messageList} = this.state;\r\n\r\n        if (!activeUser) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n\r\n        const messagesList = messageList.map(msg => \r\n            <ListGroup.Item className={msg.isNutrit? \"list-item-ans\":\"list-item-ask\"}>\r\n               {msg.date}:  {msg.time}: {msg.content}\r\n            </ListGroup.Item>\r\n        )\r\n        \r\n        return (\r\n            <div className=\"fillScr\">\r\n                <PntNavBar handleLogout={handleLogout}/>\r\n\r\n                <Form className=\"chat-form\">\r\n                    <Form.Group>                      \r\n                        <label htmlFor=\"Textarea\"> Ask Nutrit:</label>\r\n                        <Form.Textarea id=\"Textarea\" rows=\"3\" maxlength=\"250\" type=\"text\" value={messageInput} onChange={(e) => this.setState({messageInput: e.target.value})}></Form.Textarea>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group >\r\n                        <Button className=\"chat-btn\" variant=\"primary\" size=\"lg\" onClick={this.sendMessage} block variant=\"success\">Send Message </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n                <ListGroup  className=\"fillScr, group\">\r\n                    {messagesList}                   \r\n                </ListGroup>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PntQandAPage;","\r\nclass FoodModel{\r\n\r\n    constructor(parsePyfood) {\r\n        this.id = parsePyfood.id;\r\n        this.foodName = parsePyfood.get(\"Display_Name\");\r\n        this.calories = parsePyfood.get(\"Calories\");\r\n    }\r\n    \r\n}\r\n\r\nexport default FoodModel;","class SymptomModel{\r\n\r\n    constructor(parseSymptom) {\r\n        this.id = parseSymptom.id;\r\n        this.symptomName = parseSymptom.get(\"SymptomName\");\r\n    }\r\n    \r\n}\r\n\r\nexport default SymptomModel;","import React, { Component } from 'react';\r\nimport PntNavBar from '../../components/PntNavBar';\r\nimport 'rc-time-picker/assets/index.css';\r\nimport TimePicker from 'rc-time-picker';\r\nimport moment from 'moment';\r\nimport { Redirect } from 'react-router-dom';\r\nimport FoodModel from '../../model/FoodModel';\r\nimport Parse from 'parse';\r\nimport SymptomModel from '../../model/SymptomModel';\r\nimport { Button, Form, ListGroup, ListGroupItem } from 'react-bootstrap';\r\nimport './PntTrackingPage.css'\r\nimport FoodTrModel from '../../model/FoodTrModel';\r\nimport SymptomTrModel from '../../model/SymptomTrModel';\r\n\r\n\r\nclass PntTrackingPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);    \r\n\r\n        this.format = 'h:mm a';\r\n\r\n        this.state = {\r\n            theDate: moment().format(\"DD-MM-YYYY\"),\r\n            food: \"\", \r\n            calories: 0,\r\n            eatTime: moment().format(\"h:mm a\"),           \r\n            foodInput: \"\",\r\n            foodList: [],\r\n            foodTracking: [],\r\n            updatFood: \"\",\r\n            symptom: \"\",\r\n            symptomTime: moment().format(\"h:mm a\"),\r\n            symptomInput: \"\",\r\n            symptomList: [],\r\n            symptomTracking: []\r\n        }    \r\n    }\r\n    \r\n    changeFood = (event) => {\r\n\r\n        this.setState(\r\n            {foodInput: event.target.value}\r\n        );\r\n\r\n        const FoodDisplay = Parse.Object.extend('FoodDisplay');\r\n            const query = new Parse.Query(FoodDisplay);\r\n            query.contains(\"Display_Name\", event.target.value);\r\n            query.equalTo(\"Portion_Default\", 1);\r\n            query.find().then((results) => {\r\n            const foods = results.map(result => new FoodModel(result));\r\n                if (foods[0] !=undefined){\r\n                    this.setState({\r\n                        foodList: foods,\r\n                        food: foods[0].foodName,\r\n                        calories: foods[0].calories,\r\n                    });\r\n                }\r\n                console.log('FoodDisplay found', results);\r\n              }, (error) => {\r\n                console.error('Error while fetching FoodDisplay', error);\r\n              });\r\n            \r\n    }\r\n\r\n    addTrkFood = () => {\r\n\r\n        const {food, calories, eatTime, theDate} = this.state;\r\n\r\n        const FoodTracking = Parse.Object.extend('FoodTracking');\r\n        const myNewObject = new FoodTracking();\r\n\r\n        myNewObject.set('date', theDate);\r\n        myNewObject.set('time', eatTime);\r\n        myNewObject.set('foodName', food);\r\n        myNewObject.set('calories', calories);\r\n        myNewObject.set('pntId', Parse.User.current().id);\r\n        myNewObject.set('userId', Parse.User.current());\r\n\r\n        myNewObject.save().then(\r\n        (result) => {\r\n            console.log('FoodTracking created', result);\r\n            this.setState(\r\n                {foodInput: \"\"}\r\n            );\r\n            this.updateFoodTr()\r\n        },\r\n        (error) => {\r\n            console.error('Error while creating FoodTracking: ', error);\r\n        });\r\n    }\r\n\r\n    updateFoodTr =()=> {\r\n        const {theDate} = this.state;\r\n        \r\n        const FoodTracking = Parse.Object.extend('FoodTracking');\r\n        const query = new Parse.Query(FoodTracking);\r\n        query.equalTo(\"date\", theDate);\r\n        query.equalTo(\"userId\", Parse.User.current());\r\n        query.find().then(results => {          \r\n            const trackingFood = results.map(result => new FoodTrModel(result))\r\n            this.setState({\r\n                foodTracking: trackingFood\r\n            });\r\n        }, (error) => {\r\n            console.error('Error while fetching SymptomList', error);\r\n        });\r\n        \r\n    }\r\n   \r\n    addTrkSymptom = () => {\r\n        const {symptom, symptomTime, theDate} = this.state;\r\n\r\n        const SymptomTracking = Parse.Object.extend('SymptomTracking');\r\n        const myNewObject = new SymptomTracking();\r\n\r\n        myNewObject.set('date', theDate);\r\n        myNewObject.set('time', symptomTime);\r\n        myNewObject.set('symptom', symptom);\r\n        myNewObject.set('pntId', Parse.User.current().id);\r\n        myNewObject.set('userId', Parse.User.current());\r\n\r\n        myNewObject.save().then(\r\n        (result) => {\r\n            console.log('SymptomTracking created', result);\r\n            this.updateSymptomTr()\r\n        },\r\n        (error) => {\r\n            console.error('Error while creating SymptomTracking: ', error);\r\n        }\r\n        );\r\n    }\r\n\r\n    updateSymptomTr =()=>{\r\n        const {theDate} = this.state;\r\n\r\n        const SymptomTracking = Parse.Object.extend('SymptomTracking');\r\n            const query = new Parse.Query(SymptomTracking);\r\n            query.equalTo(\"date\", theDate);\r\n            query.equalTo(\"userId\", Parse.User.current());\r\n            query.find().then(results => {          \r\n                const trickingSymptoms = results.map(result => new SymptomTrModel(result))\r\n                this.setState({\r\n                    symptomTracking: trickingSymptoms\r\n                });\r\n            }, (error) => {\r\n                console.error('Error while fetching SymptomList', error);\r\n            });    \r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.updateFoodTr()\r\n        this.updateSymptomTr()\r\n\r\n        {\r\n            const FoodTracking = Parse.Object.extend('FoodTracking');\r\n            const query = new Parse.Query(FoodTracking);           \r\n            query.equalTo(\"userId\", Parse.User.current());\r\n            const results = await query.find();\r\n            const foods = results.map(result => new FoodTrModel(result));\r\n            if (foods[0] !=undefined){\r\n                this.setState({\r\n                    foodList: foods,\r\n                    food: foods[0].foodName\r\n                });\r\n            }            \r\n        }\r\n\r\n\r\n        {\r\n            const SymptomList = Parse.Object.extend('SymptomList');\r\n            const query = new Parse.Query(SymptomList);\r\n            const results = await query.find();\r\n            const symptoms = results.map(result => new SymptomModel(result));\r\n            this.setState({\r\n                symptomList: symptoms,\r\n                symptom: symptoms[0].symptomName\r\n            });\r\n        }\r\n    }\r\n\r\n    eatTimeChange = (value)=> {\r\n        this.setState(\r\n            {eatTime: value.format(this.format)}\r\n        );\r\n    }\r\n\r\n    sympTimeChange = (value)=> {\r\n        this.setState(\r\n            {symptomTime: value.format(this.format)}\r\n        );\r\n    }\r\n\r\n    foodSelect = (event)=>{\r\n        const {foodList} = this.state;\r\n\r\n        let cal = 0;\r\n        for (let f in foodList){\r\n            if (foodList[f].foodName === event.target.value){\r\n               cal = Number(foodList[f].calories);\r\n            }\r\n        }\r\n\r\n        this.setState(\r\n            {food : event.target.value,\r\n            calories : cal}\r\n        )\r\n    }\r\n  \r\n    symptomSelect = (event)=>{\r\n        this.setState(\r\n            {symptom : event.target.value}\r\n        )\r\n    }\r\n\r\n  \r\n    render() {\r\n        const {activeUser, handleLogout} = this.props;        \r\n        const {foodTracking, symptomTracking, foodInput, eatTime, food, symptomTime, symptom, foodList, symptomList} = this.state;\r\n\r\n        if (!activeUser) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n              \r\n        const mrFoodTr = foodTracking.filter(eat => (eat.time).includes(\"am\"))\r\n                        .sort((a, b) => new Date(\"1984/01/01 \"+a.time) > new Date(\"1984/01/01 \"+b.time) ? 1 : -1)\r\n                        .map(food => <p>{food.time}: {food.foodName}</p>\r\n        );\r\n               \r\n        const noonFoodTr = foodTracking.filter(eat => (eat.time).includes(\"pm\"))\r\n                        .sort((a, b) => new Date(\"1984/01/01 \"+a.time) > new Date(\"1984/01/01 \"+b.time) ? 1 : -1)\r\n                        .map(food => <p>{food.time}: {food.foodName}</p>\r\n        );\r\n\r\n        let dayCalory = 0; \r\n        for (let food in foodTracking){\r\n            dayCalory += Number(foodTracking[food].calories)\r\n        }\r\n\r\n        console.log(\"dayCalory:\"+dayCalory);        \r\n\r\n        const mrSymptomTr = symptomTracking.filter(st => (st.time).includes(\"am\"))\r\n                        .sort((a, b) => new Date(\"1984/01/01 \"+a.time) > new Date(\"1984/01/01 \"+b.time) ? 1 : -1)\r\n                        .map(symp => <p>{symp.time}: {symp.symptom}</p>                     \r\n        );  \r\n\r\n        const noonSymptomTr = symptomTracking.filter(st => (st.time).includes(\"pm\"))\r\n                        .sort((a, b) => new Date(\"1984/01/01 \"+a.time) > new Date(\"1984/01/01 \"+b.time) ? 1 : -1)\r\n                        .map(symp => <p>{symp.time}: {symp.symptom}</p>  \r\n        ); \r\n\r\n        const eatTimePicker = <TimePicker showSecond={false} defaultValue={moment()} className=\"t-pick\"\r\n                            onChange={this.eatTimeChange} format={this.format} use24Hours inputReadOnly/>\r\n\r\n        const sympTimePicker = <TimePicker showSecond={false} defaultValue={moment()} className=\"t-pick\"\r\n                                onChange={this.sympTimeChange} format={this.format} use24Hours inputReadOnly />\r\n    \r\n\r\n        const foodOptions = foodList.filter(foods => (foods.foodName).toLowerCase()\r\n                                .includes((this.state.foodInput).toLowerCase()))\r\n                                .map(foodfilter => <option value= {foodfilter.foods} >{foodfilter.foodName}</option>);\r\n\r\n\r\n        const symptomOptions = symptomList.filter(symptoms => (symptoms.symptomName).toLowerCase()\r\n                                .includes((this.state.symptomInput).toLowerCase()))\r\n                                .map(symptomfilter => <option value= {symptomfilter.symptoms} >{symptomfilter.symptomName}</option>);\r\n\r\n\r\n        return (\r\n            <div className=\"fillScr\">\r\n                <PntNavBar handleLogout={handleLogout}/> \r\n                <div className=\"form-title tr-page-title\">\r\n                    <h1> date: {this.state.theDate}</h1>\r\n                </div>                \r\n\r\n                <div className=\"tr-view-con\">              \r\n                    <ListGroup className=\"tr-view col-lg-5\"> \r\n                        <ListGroupItem className=\"eat-view\">\r\n                            <h5>Meals:</h5>\r\n                            <div className=\"mrn\"> <h6>Morning:</h6> {mrFoodTr}</div>\r\n                            <div className=\"eve\"> <h6>Afternoon:</h6> {noonFoodTr}</div> \r\n                            <div className=\"calory\"> <h6>Calories today: {dayCalory.toFixed(2)}</h6></div>                             \r\n                            \r\n                        </ListGroupItem>\r\n                        <ListGroupItem className=\"symp-view\">\r\n                            <h5>Symptoms:</h5>\r\n                            <div className=\"mrn\"> <h6>Morning:</h6> {mrSymptomTr}</div>\r\n                            <div className=\"eve\"> <h6>Afternoon:</h6> {noonSymptomTr}</div>\r\n                        </ListGroupItem>               \r\n                    </ListGroup>\r\n                </div>\r\n\r\n                <div className=\"selector-con col-lg-5 col-sm-11\">\r\n                    <div className=\"eat-con\">              \r\n                        <h3>When did you eat? </h3>\r\n                            {eatTimePicker} \r\n                        <Form.Control type=\"text\" placeholder=\"Search and select from the list:\" value={foodInput} onChange={this.changeFood}/>\r\n                        \r\n                        <select onClick={this.foodSelect}>\r\n                            {foodOptions}         \r\n                        </select>\r\n                        <p>{eatTime}: {food}</p>\r\n                        <Button variant=\"primary\" size=\"lg\" onClick={this.addTrkFood} block variant=\"success\">Add food </Button>\r\n                    </div>\r\n\r\n                    <div className=\"symp-con\">\r\n                        <h3>When did you feel symptom? </h3>\r\n                            {sympTimePicker}\r\n                        <Form.Control type='text' onChange={(e)=> this.setState({symptomInput: e.target.value})} />\r\n                        <select onClick={this.symptomSelect}>\r\n                            {symptomOptions}         \r\n                        </select>\r\n                        <p>{symptomTime}: {symptom}</p>\r\n                        <Button variant=\"primary\" size=\"lg\" onClick={this.addTrkSymptom} block variant=\"success\">Add symptom </Button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PntTrackingPage;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { Switch, Route, HashRouter } from 'react-router-dom';\r\nimport HomePage from './pages/HomePage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport PntSignUpPage from './pages/Patient/PntSignUpPage';\r\nimport NutritPntListPage from './pages/Nutrit/NutritPntListPage';\r\nimport NutritPntTracPage from './pages/Nutrit/NutritPntTracPage';\r\nimport NutritContentPage from './pages/Nutrit/NutritContentPage';\r\nimport PntBmiPage from './pages/Patient/PntBmiPage';\r\nimport PntQandAPage from './pages/Patient/PntQandAPage';\r\nimport PntTrackingPage from './pages/Patient/PntTrackingPage';\r\nimport Parse from 'parse';\r\n\r\nParse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\r\nParse.initialize(\r\n  'radc71oZRPB1K3RmLNLsQEudRgyRog2XlojqQhBY', // This is your Application ID\r\n  'oGSvQBOeOrb3Zx4a5SyVBul46u6Ic3KnUG6AAGsx' // This is your Javascript key \r\n);\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n\r\n      super(props);\r\n\r\n      this.state = {\r\n        activeUser: null\r\n      }    \r\n  }\r\n\r\n  handleLogin = (activeUser)=> {\r\n    this.setState({\r\n      activeUser: activeUser\r\n    })\r\n  }\r\n\r\n  handleLogout =()=> {\r\n    this.setState({\r\n      activeUser: null\r\n    })\r\n  }\r\n\r\n\r\n  render() { \r\n    const { activeUser } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n       <HashRouter>\r\n          <Switch>\r\n            <Route exact path=\"/\">             \r\n              <HomePage/>\r\n            </Route>\r\n            <Route exact path=\"/login\">\r\n              <LoginPage handleLogin={this.handleLogin}/>\r\n            </Route> \r\n            <Route exact path=\"/signup\">\r\n              <PntSignUpPage handleLogin={this.handleLogin}/>  \r\n            </Route>\r\n            <Route exact path=\"/patients\">\r\n              <NutritPntListPage activeUser={activeUser} handleLogout={this.handleLogout}/>  \r\n            </Route>  \r\n            <Route exact path=\"/nptr/:id\">\r\n              <NutritPntTracPage activeUser={activeUser} handleLogout={this.handleLogout}/>  \r\n            </Route>  \r\n            <Route exact path=\"/content\">\r\n              <NutritContentPage activeUser={activeUser} handleLogout={this.handleLogout}/>  \r\n            </Route>  \r\n            <Route exact path=\"/bmi\">\r\n              <PntBmiPage activeUser={activeUser} handleLogout={this.handleLogout}/>  \r\n            </Route>  \r\n            <Route exact path=\"/chat\">\r\n              <PntQandAPage activeUser={activeUser} handleLogout={this.handleLogout}/>  \r\n            </Route>  \r\n            <Route exact path=\"/ptr\">\r\n              <PntTrackingPage activeUser={activeUser} handleLogout={this.handleLogout}/>  \r\n            </Route>\r\n          </Switch>\r\n        </HashRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}